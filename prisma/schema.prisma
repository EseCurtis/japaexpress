// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MANAGER
  DELIVERY_PARTNER
  CUSTOMER
}

model Companies {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String @unique @default(uuid())

  name    String
  address String
  phone   String

  users     Users[]
  shipments Shipments[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ShipmentLogs ShipmentLogs[]
  Feedback     Feedbacks[]
}

model Users {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid String   @unique @default(uuid())
  role UserRole @default(CUSTOMER)

  firstName    String
  lastName     String
  email        String @unique
  passwordHash String

  companyId String?
  company   Companies? @relation(fields: [companyId], references: [uuid])

  assignedShipments Shipments[] @relation("DeliveryPartnerRelation")
  createdShipments  Shipments[] @relation("ManagerRelation")
  customerShipments Shipments[] @relation("CustomerRelation")
  customerFeedbacks Feedbacks[]

  confirmations Confirmations[]

  isConfirmed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ConfirmationScope {
  ACCOUNT
  EMAIL_UPDATE
}

model Confirmations {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String @unique @default(uuid())

  user    Users  @relation(fields: [userId], references: [uuid])
  userId String

  otp   Int               @unique
  scope ConfirmationScope @default(ACCOUNT)

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ShipmentStatus {
  PENDING // Shipment is created but not yet processed
  PICKED // Shipment has been picked up
  IN_TRANSIT // Shipment is on the way to its destination
  DELIVERED // Shipment has been delivered to the recipient
  RETURNED // Shipment was returned to the sender
  CANCELLED // Shipment was cancelled before processing
  FAILED // Shipment failed to be delivered (e.g., due to address issues)
}

model Shipments {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String @unique @default(uuid())

  description     String
  pickupAddress   String
  deliveryAddress String
  status          ShipmentStatus @default(PENDING)

  managerId String?
  manager   Users?  @relation("ManagerRelation", fields: [managerId], references: [uuid])

  assignedDeliveryPartnerId String?
  assignedDeliveryPartner   Users?  @relation("DeliveryPartnerRelation", fields: [assignedDeliveryPartnerId], references: [uuid])

  customersEmail String?
  customer       Users?  @relation("CustomerRelation", fields: [customersEmail], references: [email])

  companyId String
  company   Companies @relation(fields: [companyId], references: [uuid])

  logs      ShipmentLogs[]
  feedbacks Feedbacks[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShipmentLogs {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String @unique @default(uuid())

  latitude  Int
  longitude Int
  timestamp DateTime       @default(now())
  status    ShipmentStatus @default(PENDING)
  error     String

  companyId String
  company   Companies @relation(fields: [companyId], references: [uuid])

  shipmentId String
  Shipment   Shipments @relation(fields: [shipmentId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedbacks {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String @unique @default(uuid())

  rating   Int     @default(0)
  comments String?

  companyId String
  company   Companies @relation(fields: [companyId], references: [uuid])

  shipmentId String
  Shipment   Shipments @relation(fields: [shipmentId], references: [uuid])

  customersId String?
  customers   Users?  @relation(fields: [customersId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
